drop table action_log;

create table action_log
(
    log_id      number generated by default as identity primary key,
    entity_name nvarchar2(50)                                                       not null, -- название сущности (таблицы), с которой связано событие
    entity_id   nvarchar2(100)                                                      not null, -- идентификатор записи в сущности
    action_type nvarchar2(20) check (action_type in ('insert', 'update', 'delete')) not null, -- тип события
    action_date timestamp default systimestamp                                      not null, -- время события
    old_data    clob,                                                                         -- данные до события
    new_data    clob                                                                          -- данные после события (для insert и update)
);

create sequence seq_action_log start with 1;

create or replace trigger trg_log_direction
    after insert or update or delete
    on direction
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'id' value :new.id,
                'name' value :new.name,
                'institution_id' value :new.institution_id,
                'staff_id' value :new.staff_id,
                'patient_id' value :new.patient_id,
                'direction_date' value :new.direction_date,
                'expiration_date' value :new.expiration_date
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('direction', :new.id, 'insert', v_new_data);
    elsif updating then
        v_old_data := json_object(
                'id' value :old.id,
                'name' value :old.name,
                'institution_id' value :old.institution_id,
                'staff_id' value :old.staff_id,
                'patient_id' value :old.patient_id,
                'direction_date' value :old.direction_date,
                'expiration_date' value :old.expiration_date
                      );
        v_new_data := json_object(
                'id' value :new.id,
                'name' value :new.name,
                'institution_id' value :new.institution_id,
                'staff_id' value :new.staff_id,
                'patient_id' value :new.patient_id,
                'direction_date' value :new.direction_date,
                'expiration_date' value :new.expiration_date
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('direction', :old.id, 'update', v_old_data, v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'id' value :old.id,
                'name' value :old.name,
                'institution_id' value :old.institution_id,
                'staff_id' value :old.staff_id,
                'patient_id' value :old.patient_id,
                'direction_date' value :old.direction_date,
                'expiration_date' value :old.expiration_date
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('direction', :old.id, 'delete', v_old_data);
    end if;
end;

create or replace trigger trg_log_treatment
    after insert or update or delete
    on treatment
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'id' value :new.id,
                'patient_id' value :new.patient_id,
                'diagnosis' value :new.diagnosis,
                'start_date' value :new.start_date,
                'finish_date' value :new.finish_date
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('treatment', :new.id, 'insert', v_new_data);
    elsif updating then
        v_old_data := json_object(
                'id' value :old.id,
                'patient_id' value :old.patient_id,
                'diagnosis' value :old.diagnosis,
                'start_date' value :old.start_date,
                'finish_date' value :old.finish_date
                      );
        v_new_data := json_object(
                'id' value :new.id,
                'patient_id' value :new.patient_id,
                'diagnosis' value :new.diagnosis,
                'start_date' value :new.start_date,
                'finish_date' value :new.finish_date
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('treatment', :old.id, 'update', v_old_data, v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'id' value :old.id,
                'patient_id' value :old.patient_id,
                'diagnosis' value :old.diagnosis,
                'start_date' value :old.start_date,
                'finish_date' value :old.finish_date
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('treatment', :old.id, 'delete', v_old_data);
    end if;
end;

create or replace trigger trg_log_patient_staff
    after insert or update or delete
    on patient_staff
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'patient_id' value :new.patient_id,
                'staff_id' value :new.staff_id
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('patient_staff', to_char(:new.patient_id) || ' ' || to_char(:new.staff_id), 'insert', v_new_data);
    elsif updating then
        v_old_data := json_object(
                'patient_id' value :old.patient_id,
                'staff_id' value :old.staff_id
                      );
        v_new_data := json_object(
                'patient_id' value :new.patient_id,
                'staff_id' value :new.staff_id
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('patient_staff', to_char(:old.patient_id) || ' ' || to_char(:old.staff_id), 'update', v_old_data,
                v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'patient_id' value :old.patient_id,
                'staff_id' value :old.staff_id
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('patient_staff', to_char(:old.patient_id) || ' ' || to_char(:old.staff_id), 'delete', v_old_data);
    end if;
end;

create or replace trigger trg_log_staff_institution
    after insert or update or delete
    on staff_institution
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'staff_id' value :new.staff_id,
                'institution_id' value :new.institution_id
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('staff_institution', to_char(:new.staff_id) || ' ' || to_char(:new.institution_id), 'insert',
                v_new_data);
    elsif updating then
        v_old_data := json_object(
                'staff_id' value :old.staff_id,
                'institution_id' value :old.institution_id
                      );
        v_new_data := json_object(
                'staff_id' value :new.staff_id,
                'institution_id' value :new.institution_id
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('staff_institution', to_char(:old.staff_id) || ' ' || to_char(:old.institution_id), 'update',
                v_old_data, v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'staff_id' value :old.staff_id,
                'institution_id' value :old.institution_id
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('staff_institution', to_char(:old.staff_id) || ' ' || to_char(:old.institution_id), 'delete',
                v_old_data);
    end if;
end;

create or replace trigger trg_log_institution
    after insert or update or delete
    on institution
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'id' value :new.id,
                'institution_type' value :new.institution_type,
                'name' value :new.name,
                'polyclinic' value :new.polyclinic
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('institution', :new.id, 'insert', v_new_data);
    elsif updating then
        v_old_data := json_object(
                'id' value :old.id,
                'institution_type' value :old.institution_type,
                'name' value :old.name,
                'polyclinic' value :old.polyclinic
                      );
        v_new_data := json_object(
                'id' value :new.id,
                'institution_type' value :new.institution_type,
                'name' value :new.name,
                'polyclinic' value :new.polyclinic
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('institution', :old.id, 'update', v_old_data, v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'id' value :old.id,
                'institution_type' value :old.institution_type,
                'name' value :old.name,
                'polyclinic' value :old.polyclinic
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('institution', :old.id, 'delete', v_old_data);
    end if;
end;
/

create or replace trigger trg_log_staff
    after insert or update or delete
    on staff
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'id' value :new.id,
                'name' value :new.name,
                'surname' value :new.surname,
                'staff_type' value :new.staff_type,
                'rank' value :new.rank,
                'degree' value :new.degree,
                'profile' value :new.profile,
                'can_operate' value :new.can_operate,
                'operation_count' value :new.operation_count,
                'death_operation_count' value :new.death_operation_count,
                'salary_coefficient' value :new.salary_coefficient,
                'vacation' value :new.vacation,
                'start_date' value to_char(:new.start_date, 'yyyy-mm-dd')
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('staff', :new.id, 'insert', v_new_data);
    elsif updating then
        v_old_data := json_object(
                'id' value :old.id,
                'name' value :old.name,
                'surname' value :old.surname,
                'staff_type' value :old.staff_type,
                'rank' value :old.rank,
                'degree' value :old.degree,
                'profile' value :old.profile,
                'can_operate' value :old.can_operate,
                'operation_count' value :old.operation_count,
                'death_operation_count' value :old.death_operation_count,
                'salary_coefficient' value :old.salary_coefficient,
                'vacation' value :old.vacation,
                'start_date' value to_char(:old.start_date, 'yyyy-mm-dd')
                      );
        v_new_data := json_object(
                'id' value :new.id,
                'name' value :new.name,
                'surname' value :new.surname,
                'staff_type' value :new.staff_type,
                'rank' value :new.rank,
                'degree' value :new.degree,
                'profile' value :new.profile,
                'can_operate' value :new.can_operate,
                'operation_count' value :new.operation_count,
                'death_operation_count' value :new.death_operation_count,
                'salary_coefficient' value :new.salary_coefficient,
                'vacation' value :new.vacation,
                'start_date' value to_char(:new.start_date, 'yyyy-mm-dd')
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('staff', :old.id, 'update', v_old_data, v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'id' value :old.id,
                'name' value :old.name,
                'surname' value :old.surname,
                'staff_type' value :old.staff_type,
                'rank' value :old.rank,
                'degree' value :old.degree,
                'profile' value :old.profile,
                'can_operate' value :old.can_operate,
                'operation_count' value :old.operation_count,
                'death_operation_count' value :old.death_operation_count,
                'salary_coefficient' value :old.salary_coefficient,
                'vacation' value :old.vacation,
                'start_date' value to_char(:old.start_date, 'yyyy-mm-dd')
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('staff', :old.id, 'delete', v_old_data);
    end if;
end;
/

create or replace trigger trg_log_patient
    after insert or update or delete
    on patient
    for each row
declare
    v_old_data clob;
    v_new_data clob;
begin
    if inserting then
        v_new_data := json_object(
                'id' value :new.id,
                'name' value :new.name,
                'surname' value :new.surname,
                'polyclinic' value :new.polyclinic
                      );
        insert into action_log (entity_name, entity_id, action_type, new_data)
        values ('patient', :new.id, 'insert', v_new_data);
    elsif updating then
        v_old_data := json_object(
                'id' value :old.id,
                'name' value :old.name,
                'surname' value :old.surname,
                'polyclinic' value :old.polyclinic
                      );
        v_new_data := json_object(
                'id' value :new.id,
                'name' value :new.name,
                'surname' value :new.surname,
                'polyclinic' value :new.polyclinic
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data, new_data)
        values ('patient', :old.id, 'update', v_old_data, v_new_data);
    elsif deleting then
        v_old_data := json_object(
                'id' value :old.id,
                'name' value :old.name,
                'surname' value :old.surname,
                'polyclinic' value :old.polyclinic
                      );
        insert into action_log (entity_name, entity_id, action_type, old_data)
        values ('patient', :old.id, 'delete', v_old_data);
    end if;
end;
/
